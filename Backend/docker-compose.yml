version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: ecommerce_db
    environment:
      - POSTGRES_DB=ecommerce
      - POSTGRES_USER=ecommerce_user
      - POSTGRES_PASSWORD=ecommerce_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ecommerce_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: ecommerce_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ecommerce_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Django Backend
  backend:
    build: .
    container_name: ecommerce_backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=your-super-secret-key-change-in-production
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@db:5432/ecommerce
      - REDIS_URL=redis://:redis_password@redis:6379/1
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USE_TLS=True
      - EMAIL_HOST_USER=your-email@gmail.com
      - EMAIL_HOST_PASSWORD=your-app-password
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
      - ./static:/app/static
    networks:
      - ecommerce_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery:
    build: .
    container_name: ecommerce_celery
    command: celery -A Ecommerce worker -l info --concurrency=4
    environment:
      - DEBUG=False
      - SECRET_KEY=your-super-secret-key-change-in-production
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@db:5432/ecommerce
      - REDIS_URL=redis://:redis_password@redis:6379/1
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
    networks:
      - ecommerce_network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build: .
    container_name: ecommerce_celery_beat
    command: celery -A Ecommerce beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=False
      - SECRET_KEY=your-super-secret-key-change-in-production
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@db:5432/ecommerce
      - REDIS_URL=redis://:redis_password@redis:6379/1
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - ecommerce_network
    restart: unless-stopped

  # Celery Flower (Monitoring)
  celery-flower:
    build: .
    container_name: ecommerce_celery_flower
    command: celery -A Ecommerce flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DEBUG=False
      - SECRET_KEY=your-super-secret-key-change-in-production
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@db:5432/ecommerce
      - REDIS_URL=redis://:redis_password@redis:6379/1
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
    depends_on:
      - celery
    networks:
      - ecommerce_network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: ecommerce_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static:/app/static
      - ./media:/app/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - ecommerce_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce_network:
    driver: bridge
